---
# tasks file for solr

- name: get zookeeper list
  become: yes
  become_user: '{{mapr_admin_username}}'
  shell: maprcli node listzookeepers | sed -n '2s/ *$//p'
  register: zookeepers
  changed_when: false

- name: install lsof (needed by solr start)
  become: yes
  become_user: root
  yum: name=lsof state=present
  environment: '{{proxy_env}}'

- name: stat the solr tarball
  stat: path="/tmp/solr-{{solr_version}}.tgz"
  register: solr_tarball

- name: download Solr 
  get_url:
    url: http://archive.apache.org/dist/lucene/solr/{{solr_version}}/solr-{{solr_version}}.tgz
    dest: /tmp
  when: solr_tarball.stat.exists == False
  environment: '{{proxy_env}}'

- name: ensure solr_home exists
  become: yes
  become_user: root
  file: state=directory path={{solr_home}} owner='{{mapr_admin_username}}' group='{{mapr_admin_username}}' 

- name: untar Solr
  become: yes
  become_user: '{{mapr_admin_username}}'
  unarchive: copy=no src=/tmp/solr-{{solr_version}}.tgz dest={{solr_home}} creates='{{solr_home}}/solr-{{solr_version}}'

- name: write solr init script
  become: yes
  become_user: '{{mapr_admin_username}}'
  template: src=solr4init.j2 dest='{{solr_home}}/solr-{{solr_version}}/solr4init' mode=0755 owner={{mapr_admin_username}} 
  notify: restart solr

- name: write solr collection add script
  become: yes
  become_user: '{{mapr_admin_username}}'
  template: src=solr4add.j2 dest='{{solr_home}}/solr-{{solr_version}}/solr4add' mode=0755 owner={{mapr_admin_username}}

- name: write solr bootstrap script
  become: yes
  become_user: '{{mapr_admin_username}}'
  template: src=solrbootstrap.j2 dest='{{solr_home}}/solr-{{solr_version}}/solrbootstrap' mode=0755 owner={{mapr_admin_username}}

- name: set ownership to mapr for solr
  become: yes
  become_user: '{{mapr_admin_username}}'
  file: state=directory owner=mapr group=mapr recurse=true path={{item}}
  with_items:
    - '{{solr_home}}/solr-{{solr_version}}'

- name: create a volume for Solr
  run_once: true
  mapr_volume: state=present name=solr_home path=/apps/solr createparent=1 replication=3 minreplication=2 mapr_webserver={{mapr_webserver}} username={{mapr_admin_username}} password={{mapr_admin_password_clear|default("mapr")}}
  with_items: groups["solr"]

# Uncomment the following if not using HDFS.
#- name: disable locks on the index files (we are storing on NFS, no locking)
#  become: yes
#  lineinfile:
#    line: "<lockType>${solr.lock.type:single}</lockType>"
#    regexp: "<lockType>.*solr.lock.type"
#    dest: '{{solr_home}}/solr-{{solr_version}}/{{solr_config_home}}/solr/{{solr_collection}}/conf/solrconfig.xml'

- name: check for solr_config_home
  stat: path={{solr_home}}/solr-{{solr_version}}/{{solr_config_home}}
  register: solr_config_home_check

- name: copy example to solr_config_home
  become: yes
  become_user: '{{mapr_admin_username}}'
  command: cp -a {{solr_home}}/solr-{{solr_version}}/example {{solr_home}}/solr-{{solr_version}}/{{solr_config_home}}
  when: solr_config_home_check.stat.exists == False

- name: rename collection
  become: yes
  become_user: '{{mapr_admin_username}}'
  command: mv collection1 {{solr_collection}}
  args:
    chdir: "{{solr_home}}/solr-{{solr_version}}/{{solr_config_home}}/solr"
    removes: collection1

# N.B. HDFS does not support ':' in filenames, and will return a confusing error if backup=yes
- name: rename collection in core.properties
  become: yes
  become_user: '{{mapr_admin_username}}'
  lineinfile: dest="{{solr_home}}/solr-{{solr_version}}/{{solr_config_home}}/solr/{{solr_collection}}/core.properties" regexp="^name=" line="name={{solr_collection}}" backup=no

- name: pause a few seconds
  pause: seconds=5

# N.B. HDFS does not support ':' in filenames, and will return a confusing error if backup=yes
- name: copy solrconfig.xml to the copied example
  become: yes
  become_user: '{{mapr_admin_username}}'
  template: src=solrconfig.xml.j2 dest='{{solr_home}}/solr-{{solr_version}}/{{solr_config_home}}/solr/{{solr_collection}}/conf/solrconfig.xml' backup=no owner='{{mapr_admin_username}}'
  notify: restart solr

# N.B. HDFS does not support ':' in filenames, and will return a confusing error if backup=yes
- name: copy solr config to solr's home
  become: yes
  become_user: '{{mapr_admin_username}}'
  run_once: yes
  command: hadoop fs -copyFromLocal -f -p file://{{solr_home}}/solr-{{solr_version}}/{{solr_config_home}} {{solr_hdfs_home}}
  #command: cp -r {{solr_home}}/solr-{{solr_version}}/example /apps/solr/{{ansible_hostname}}

- name: delete solr log 
  become: yes
  become_user: '{{mapr_admin_username}}'
  file: path='{{solr_home}}/solr-{{solr_version}}/{{solr_config_home}}/logs/solr.log' state=absent 
  when: solr_config_home_check.stat.exists == False

- name: bootstrap solr zk
  become: yes
  become_user: '{{mapr_admin_username}}'
  command: '{{solr_home}}/solr-{{solr_version}}/solrbootstrap'
  async: 60
  poll: 0
  register: bootstrap
  when: solr_config_home_check.stat.exists == False

- debug: var=bootstrap

- name: wait for solr to be listening
  wait_for: port=8983 timeout=60 delay=10
  when: bootstrap.started is defined

- name: wait for solr to finish bootstrapping
  wait_for: path={{solr_home}}/solr-{{solr_version}}/{{solr_config_home}}/logs/solr.log state=present search_regex="live nodes size" timeout=60
  when: bootstrap.started is defined
 
- name: kill the bootstrapped solr
  become: yes
  become_user: '{{mapr_admin_username}}'
  command: pkill -f "solr -jar start.jar"
  when: bootstrap.started is defined

- name: write warden.conf for solr
  become: yes
  become_user: root
  template: src=warden.solr.conf.j2 dest=/opt/mapr/conf/conf.d/warden.solr.conf mode=0644 owner=mapr group=mapr 
  register: warden_config

- name: add MapR v5.1.0 libraries to solr example
  become: yes
  become_user: '{{mapr_admin_username}}'
  file: src=/opt/mapr/lib/{{item}} path={{solr_home}}/solr-{{solr_version}}/{{solr_config_home}}/solr-webapp/webapp/WEB-INF/lib/{{item}} state=link force=yes
  with_items:
    - zookeeper-3.4.5-mapr-1503.jar
    - maprfs-5.1.0-mapr.jar
    - hadoop-common-2.7.0.jar
    - commons-collections-3.2.2.jar
    - hadoop-auth-2.7.0.jar
    - json-20080701.jar
    - protobuf-java-2.5.0.jar
  when: mapr_version in ("v5.1.0")

- name: add MapR v4.1.0 libraries to solr example
  become: yes
  become_user: '{{mapr_admin_username}}'
  file: src=/opt/mapr/lib/{{item}} path={{solr_home}}/solr-{{solr_version}}/{{solr_config_home}}/solr-webapp/webapp/WEB-INF/lib/{{item}} state=link force=yes
  with_items:
    - zookeeper-3.4.5-mapr-1503.jar
    - maprfs-4.1.0-mapr.jar
    - hadoop-common-2.5.1.jar
    - commons-collections-3.2.1.jar
    - hadoop-auth-2.5.1.jar
    - json-20080701.jar
    - protobuf-java-2.5.0.jar
  when: mapr_version in ("v4.1.0")

- name: remove old solr libraries
  become: yes
  become_user: '{{mapr_admin_username}}'
  file: path={{solr_home}}/solr-{{solr_version}}/{{solr_config_home}}/solr-webapp/webapp/WEB-INF/lib/{{item}} state=absent
  with_items:
    - hadoop-auth-2.2.0.jar
    - hadoop-common-2.2.0.jar
    - zookeeper-3.4.5.jar
    - zookeeper-3.4.6.jar
    - protobuf-java-2.4.0a.jar

- name: give warden a little time to discover the new service
  pause: seconds=45
  when: warden_config|changed

- name: start solr
  become: yes
  become_user: '{{mapr_admin_username}}'
  command: maprcli node services -action restart -name solr -filter csvc==solr

- name: wait for solr to be listening
  wait_for: port=8983 timeout=60

